# This is a basic workflow to help you get started with Actions

name: Build & Deploy WebApp

# permissions:
#   id-token: read
#   contents: read

env:
  ARTIFACT_NAME: webservice
  CODEDEPLOY_APPLICATION_NAME: csye6225-webapp
  CODEDEPLOY_APPLICATION_DEPLOYMENT_GROUP_NAME: csye6225-webapp-deployment
  AWS_REGION: us-east-1

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  cicd:
    name: cicd
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Test
        run: |
          npm ci
          npm run lint

      # Install project dependencies and build
      - name: Install dependencies
        run: npm install
      - name: Run build
        run: node test.js

      # - name: Move files
      #   run: |
      #     mkdir dist/
      #     # mv aws dist/
      #     cp -r aws dist/aws
      #     cp -r controller dist/controller
      #     cp -r model dist/model
      #     cp -r util dist/util
      #     cp -r router dist/router
      #     cp -r controller dist/sql
      #     cp package.json dist/package.json
      #     cp app.js dist/app.js
      #     cp healthz.js dist/healthz.js
      #     cp appspec.yml dist/appspec.yml

      - name: zip file
        uses: papeloto/action-zip@v1
        with:
          files: dist
          dest: ${{ env.ARTIFACT_NAME }}

      # Install AWS CLI 2
      - name: Install AWS CLI 2
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@master
        with:
          version: "2"
        # run: |
        #   curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        #   unzip awscliv2.zip
        #   sudo ./aws/install
      # - name: test
      #   run: |
      #     echo ${{ secrets.AWS_ACCESSKEY_ID }} | sed 's/./& /g'
      #     echo  ${{  secrets.AWS_SECRET_ACCESS_KEY }} | sed 's/./& /g'
      #     echo  ${{ secrets.S3_CODEDEPLOY_BUCKET }} | sed 's/./& /g'
      #     echo ${{ secrets.BWS_ACCESSKEY_ID }} | sed 's/./& /g'
      #     echo  ${{  secrets.BWS_SECRET_ACCESS_KEY }} | sed 's/./& /g'
      #     echo  ${{ secrets.S4_CODEDEPLOY_BUCKET }} | sed 's/./& /g'
      #     echo ${{ env.AWS_REGION }}
      #     echo ${{ secrets.GITHUB_TOKEN }}

      # Configure AWS credentials
      - name: Configure AWS Credentials

        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESSKEY_ID }} 
          aws-secret-access-key: ${{  secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:  ${{env.AWS_REGION}}
        env:
          aws-access-key-id:  ${{secrets.AWS_ACCESSKEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region:  ${{env.AWS_REGION}}
     
      # Deploy push to AWS S3
      - name: AWS Deploy push
        run: |
          aws deploy push \
          --application-name ${{env.CODEDEPLOY_APPLICATION_NAME }} \
          --description "This is a revision for the ${{ env.CODEDEPLOY_APPLICATION_NAME }}-${{ github.sha }}" \
          --ignore-hidden-files \
          --s3-location s3://${{secrets.S3_CODEDEPLOY_BUCKET}}/${{ env.ARTIFACT_NAME }} \
          --source .

      # Create deployment to CodeDeploy
      - name: AWS Create Deployment
        run: |
          aws deploy create-deployment \
           --application-name ${{ env.CODEDEPLOY_APPLICATION_NAME }} \
           --deployment-config-name CodeDeployDefault.AllAtOnce \
           --deployment-group-name ${{ env.CODEDEPLOY_APPLICATION_DEPLOYMENT_GROUP_NAME }} \
           --file-exists-behavior OVERWRITE \
           --s3-location bucket=${{ secrets.S3_CODEDEPLOY_BUCKET }},key=${{ env.ARTIFACT_NAME }},bundleType=zip \

      # - name: Copy Artifact to S3
      #   run: |
      #     aws s3 sync ./${{ env.ARTIFACT_NAME }} s3://${{ secrets.S3_CODEDEPLOY_BUCKET }}
